{"name":"Slugid.py","tagline":"A python port of https://github.com/taskcluster/slugid","body":"slugid.py - Compressed UUIDs for python\r\n=======================================\r\n\r\n<img src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n\r\n[![Build Status](https://travis-ci.org/taskcluster/slugid.py.svg?branch=master)](http://travis-ci.org/taskcluster/slugid.py)\r\n[![Coverage Status](https://coveralls.io/repos/taskcluster/slugid.py/badge.svg?branch=master&service=github)](https://coveralls.io/github/taskcluster/slugid.py?branch=master)\r\n[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](https://github.com/taskcluster/slugid.py/blob/master/LICENSE)\r\n[![pypi Version](https://img.shields.io/pypi/v/slugid.svg)](https://pypi.python.org/pypi/slugid)\r\n[![Downloads](https://img.shields.io/pypi/dm/slugid.svg)](https://pypi.python.org/pypi/slugid)\r\n\r\nA python module for generating v4 UUIDs and encoding them into 22 character\r\nURL-safe base64 slug representation (see [RFC 4648 sec. 5](http://tools.ietf.org/html/rfc4648#section-5)).\r\n\r\nSlugs are url-safe base64 encoded v4 uuids, stripped of base64 `=` padding.\r\n\r\nThere are two methods for generating slugs - `slugid.v4()` and\r\n`slugid.nice()`.\r\n\r\n* The `slugid.v4()` method returns a slug from a randomly generated v4 uuid.\r\n* The `slugid.nice()` method returns a v4 slug which conforms to a set of\r\n  \"nice\" properties. At the moment the only \"nice\" property is that the slug\r\n  starts with `[A-Za-f]`, which in turn implies that the first (most\r\n  significant) bit of its associated uuid is set to 0.\r\n\r\nThe purpose of the `slugid.nice()` method is to support having slugids which\r\ncan be used in more contexts safely. Regular slugids can safely be used in\r\nurls, and for example in AMQP routing keys. However, slugs beginning with `-`\r\nmay cause problems when used as command line parameters.\r\n\r\nIn contrast, slugids generated by the `slugid.nice()` method can safely be\r\nused as command line parameters. This comes at a cost to entropy (121 bits vs\r\n122 bits for regular v4 slugs).\r\n\r\nSlug consumers should consider carefully which of these two slug generation\r\nmethods to call. Is it more important to have maximum entropy, or to have\r\nslugids that do not need special treatment when used as command line\r\nparameters? This is especially important if you are providing a service which\r\nsupplies slugs to unexpecting tool developers downstream, who may not realise\r\nthe risks of using your regular v4 slugs as command line parameters, especially\r\nsince this would arise only as an intermittent issue (one time in 64).\r\n\r\nGenerated slugs take the form `[A-Za-z0-9_-]{22}`, or more precisely:\r\n\r\n* `slugid.v4()` slugs conform to\r\n  `[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]`\r\n\r\n* `slugid.nice()` slugs conform to\r\n  `[A-Za-f][A-Za-z0-9_-]{7}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]`\r\n\r\nRFC 4122 defines the setting of 6 bits of the v4 UUID which implies v4 slugs\r\nprovide 128 - 6 = 122 bits entropy. Due to the (un)setting of the first bit\r\nof \"nice\" slugs, nice slugs provide therefore 121 bits entropy.\r\n\r\n```python\r\nimport slugid\r\n\r\n# Generate \"nice\" URL-safe base64 encoded UUID version 4 (random)\r\nslug = slugid.nice()  # a8_YezW8T7e1jLxG7evy-A\r\n```\r\n\r\nEncode / Decode\r\n---------------\r\n\r\n```python\r\nimport slugid\r\n\r\n# Generate URL-safe base64 encoded UUID version 4 (random)\r\nslug = slugid.v4()\r\n\r\n# Get UUID on the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\nuuid = slugid.decode(slug)\r\n\r\n# Compress to slug again\r\nassert(slug == slugid.encode(uuid))\r\n```\r\n\r\nRNG Characteristics\r\n-------------------\r\nUUID generation is performed by the built-in python [uuid\r\nlibrary](https://docs.python.org/2/library/uuid.html) which does not document\r\nits randomness, but falls back to system uuid-generation libraries where\r\navailable, then urandom, then random. Therefore generated slugids match these\r\nrng characteristics.\r\n\r\nLicense\r\n-------\r\nThe `slugid` library is released on the MPL 2.0 license, see the `LICENSE`\r\nfor complete license.\r\n\r\nTesting\r\n-------\r\n\r\n```bash\r\npip install -r requirements.txt\r\ntox\r\n```\r\n\r\nPublishing\r\n----------\r\nTo republish this library to pypi.python.org, update the version number in\r\n`slugid/__init__.py`, commit it, push to github, and then run:\r\n\r\n```bash\r\n# delete stale versions\r\nrm -rf dist\r\n\r\n# build source package\r\npython setup.py sdist\r\n\r\n# publish it\r\ntwine upload -s dist/*\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}